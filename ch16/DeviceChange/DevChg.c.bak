/* ************************************
*《###书名###》
* 示例代码
* DevChgc
* 16.1 设备管理
**************************************/
/* 头文件 */
#include <windows.h>
#include <Dbt.h>
/* 全局变量 */
HINSTANCE hinst;
HWND hWnd;
HDEVNOTIFY hDevNotify;// NOTIFY
int YStart = 10;// 用于TextOut时定位输出位置
/* 全局变量 */
int WINAPI WinMain(HINSTANCE, HINSTANCE, LPSTR, int);
InitApplication(HINSTANCE);
InitInstance(HINSTANCE, int);
LRESULT CALLBACK MainWndProc(HWND, UINT, WPARAM, LPARAM);
void OnDeviceChange (HWND hwnd, WPARAM wParam, LPARAM lParam);
char FirstDriveFromMask (ULONG unitmask);
BOOL DoRegisterDeviceInterface( GUID , HDEVNOTIFY * );
/*************************************
* WinMain
**************************************/
int WINAPI WinMain(HINSTANCE hinstance, HINSTANCE hPrevInstance,
				   LPSTR lpCmdLine, int nCmdShow)
{
	MSG msg;
	BOOL fGotMessage;
	if (!InitApplication(hinstance))
		return 1;

	if (!InitInstance(hinstance, nCmdShow))
		return 1;

	if(!DoRegisterDeviceInterface( GUID_DEVINTERFACE_DISK, &hDevNotify ))
		// GUID_DEVINTERFACE_MEDIUMCHANGER
		// GUID_DEVINTERFACE_VOLUME
		// GUID_DEVINTERFACE_STORAGEPORT
		// ……

	{
		return 1;
	}

	while ((fGotMessage = GetMessage(&msg, (HWND) NULL, 0, 0)) != 0 && fGotMessage != -1)
	{
		TranslateMessage(&msg);
		DispatchMessage(&msg);
	}
	return msg.wParam;
	UNREFERENCED_PARAMETER(lpCmdLine);
}
/*************************************
* InitApplication
**************************************/
BOOL InitApplication(HINSTANCE hinstance)
{
	WNDCLASSEX wcx;

	wcx.cbSize = sizeof(wcx); 
	wcx.style = CS_HREDRAW | CS_VREDRAW; 
	wcx.lpfnWndProc = MainWndProc; 
	wcx.cbClsExtra = 0; 
	wcx.cbWndExtra = 0; 
	wcx.hInstance = hinstance; 
	wcx.hIcon = LoadIcon(NULL, IDI_APPLICATION); 
	wcx.hCursor = LoadCursor(NULL, IDC_ARROW);
	wcx.hbrBackground = GetStockObject( WHITE_BRUSH);
	wcx.lpszMenuName = "MainMenu"; 
	wcx.lpszClassName = "MainWClass"; 
	wcx.hIconSm = LoadImage(hinstance, 
		MAKEINTRESOURCE(5),
		IMAGE_ICON,
		GetSystemMetrics(SM_CXSMICON),
		GetSystemMetrics(SM_CYSMICON),
		LR_DEFAULTCOLOR);

	return RegisterClassEx(&wcx);
}
/*************************************
* InitInstance
**************************************/
BOOL InitInstance(HINSTANCE hinstance, int nCmdShow)
{
	HWND hwnd;
	hinst = hinstance;

	hwnd = CreateWindow(
		"MainWClass", 
		"device monitor", 
		WS_OVERLAPPEDWINDOW, 
		CW_USEDEFAULT,  CW_USEDEFAULT, 
		CW_USEDEFAULT,  CW_USEDEFAULT, 
		(HWND) NULL, (HMENU) NULL, hinstance, (LPVOID) NULL);

	if (!hwnd)
		return FALSE;

	hWnd = hwnd;

	ShowWindow(hwnd, nCmdShow);
	UpdateWindow(hwnd);
	return TRUE;

}
/*************************************
* MainWndProc
**************************************/
LRESULT CALLBACK MainWndProc(
							 HWND hwnd, 
							 UINT uMsg, 
							 WPARAM wParam, 
							 LPARAM lParam)
{

	switch (uMsg)
	{
	case WM_DEVICECHANGE:
		OnDeviceChange ( hwnd, wParam, lParam);
		break;

	case WM_DESTROY:
		ExitProcess(0);
		return 0;

	default:
		return DefWindowProc(hwnd, uMsg, wParam, lParam);
	}
	return 0;
}

/*************************************
* void OnDeviceChange (HWND , WPARAM , LPARAM )
* 功能	处理 WM_DEVICECHANGE 消息
*		参数为窗口消息
**************************************/
void OnDeviceChange (HWND hwnd, WPARAM wParam, LPARAM lParam)
{
	// 获取 PDEV_BROADCAST_HDR 参数
	PDEV_BROADCAST_HDR lpdb = (PDEV_BROADCAST_HDR)lParam;
	char szMsg[256];

	HDC hdc = GetDC(hwnd);
	DWORD dwStrLen;
	SIZE sz;
	TEXTMETRIC tm;

	switch(wParam)
	{
	case DBT_DEVICEARRIVAL:
		// 插入 CD 或者 DVD 到光驱中
		if (lpdb -> dbch_devicetype == DBT_DEVTYP_VOLUME)
		{
			// 获取参数
			PDEV_BROADCAST_VOLUME lpdbv = (PDEV_BROADCAST_VOLUME)lpdb;
			// 判断标志
			if (lpdbv -> dbcv_flags & DBTF_MEDIA)
			{
				wsprintf (szMsg, "Drive %c: Media has arrived.",
					// 根据mask获取盘符，
					// dbcv_unitmask的bit依次表示A:，B:...，如果为1，表示是该盘符，
					FirstDriveFromMask(lpdbv ->dbcv_unitmask));
			}
			else
				// 标志不配置，打印事件ID
				wsprintf (szMsg, "Message: %u.", wParam);
		}
		else
			// 设置类型不配置，打印事件ID
			wsprintf (szMsg, "Message: %u.", wParam);
		break;

	case DBT_DEVICEREMOVECOMPLETE:
		// 光驱弹出
		if (lpdb -> dbch_devicetype == DBT_DEVTYP_VOLUME)
		{
			// 获取参数
			PDEV_BROADCAST_VOLUME lpdbv = (PDEV_BROADCAST_VOLUME)lpdb;
			// 检查标志
			if (lpdbv -> dbcv_flags & DBTF_MEDIA)
			{
				wsprintf (szMsg, "Drive %c: Media was removed.",
					FirstDriveFromMask(lpdbv ->dbcv_unitmask));
			}
			else
				wsprintf (szMsg, "Message: %u.", wParam);
		}
		else
			wsprintf (szMsg, "Message: %u.", wParam);
		break;

	default:
		// 其他设备改变情况，打印设备ID
		wsprintf (szMsg, "Message: %u.", wParam);

	}
	// 在界面上输出设备变更消息
	dwStrLen = lstrlen(szMsg);
	// 计算输出位置
	GetTextExtentPoint32(hdc, szMsg, dwStrLen, &sz);
	YStart += sz.cy;
	GetTextMetrics(hdc, &tm);
	YStart -= tm.tmOverhang;
	// TODO 窗口滚动
	TextOut(hdc, 10, YStart, szMsg, dwStrLen);
	DeleteDC( hdc );	// 释放DC
}

/*************************************
* char FirstDriveFromMask (ULONG unitmask)
* 功能	将盘符信息mask转换为盘符
**************************************/
char FirstDriveFromMask (ULONG unitmask)
{
	char i;

	for (i = 0; i < 26; ++i)
	{
		if (unitmask & 0x1)
			break;
		unitmask = unitmask >> 1;
	}

	return (i + 'A');
}

/*************************************
* DoRegisterDeviceInterface
* 功能	调用RegisterDeviceNotification
*			API 函数注册设备变更广播消息，
*			所注册类型的设置发生变更后，窗口会收到消息
**************************************/
BOOL DoRegisterDeviceInterface(
							   GUID InterfaceClassGuid,
							   HDEVNOTIFY *hDevNotify
							   )

{
	DEV_BROADCAST_DEVICEINTERFACE NotificationFilter;
	char szMsg[80];
	// 填充DEV_BROADCAST_DEVICEINTERFACE结构，作为参数
	ZeroMemory( &NotificationFilter, sizeof(NotificationFilter) );
	NotificationFilter.dbcc_size =
		sizeof(DEV_BROADCAST_DEVICEINTERFACE);
	// 所需监视的设备类型
	NotificationFilter.dbcc_devicetype = DBT_DEVTYP_DEVICEINTERFACE;
	// 类型的GUID，可以是GUID_DEVINTERFACE_DISK等。
	NotificationFilter.dbcc_classguid = InterfaceClassGuid;
	// 调用RegisterDeviceNotification API
	*hDevNotify = RegisterDeviceNotification( hWnd,
		&NotificationFilter,
		DEVICE_NOTIFY_WINDOW_HANDLE
		);
	// 判断调用结果，返回。
	if(!*hDevNotify)
	{
		wsprintf(szMsg, "RegisterDeviceNotification failed: %d\n",
			GetLastError());
		MessageBox(hWnd, szMsg, "Registration", MB_OK);
		return FALSE;
	}
	return TRUE;
}